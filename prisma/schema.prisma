// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Encargado {
    id       String  @id @default(cuid())
    nombre   String
    apellido String
    telefono String?
    email    String?
    Kid      Kid[]
}

model Kid {
    id             String       @id @default(cuid())
    nombre         String
    apellido       String
    ano_nacimiento DateTime
    encargado      Encargado    @relation(fields: [encargadoId], references: [id])
    encargadoId    String
    pagos          Pagos[]
    asistencia     Asistencia[]
}

model Pagos {
    id                   String   @id @default(cuid())
    fecha_inicio         DateTime
    fecha_fin            DateTime
    cantidad_asistencias Int
    fecha_pago           DateTime
    kid                  Kid      @relation(fields: [kidId], references: [id])
    kidId                String
}

model Curso {
    id          String       @id @default(cuid())
    hora_inicio DateTime
    hora_fin    DateTime
    dia_semana  DIAS         @default(LUNES)
    asistencia  Asistencia[]
}

model Asistencia {
    kid        Kid      @relation(fields: [kidId], references: [id])
    kidId      String
    curso      Curso    @relation(fields: [cursoId], references: [id])
    cursoId    String
    fecha      DateTime
    asistio    Boolean  @default(false)
    hora_toma  DateTime @default(now())
    tomada_por String

    @@id([kidId, cursoId])
}

enum DIAS {
    LUNES
    MARTES
    MIERCOLES
    JUEVES
    VIERNES
    SABADO
}
